
import java.util.*;

public class Task4 {
    private String username;
    private String password;
    private boolean isLoggedIn;
    private int timeRemaining;
    private int questionCount;
    private int[] userAnswers;
    private int[] correctAnswers;
    private String[] questions;
    private String[][] options;

    // Color codes for console
    private static final String RESET = "\u001B[0m";
    private static final String GREEN = "\u001B[32m";
    private static final String RED = "\u001B[31m";
    private static final String YELLOW = "\u001B[33m";
    private static final String BLUE = "\u001B[34m";
    private static final String BOLD = "\u001B[1m";
    private static final String UNDERLINE = "\u001B[4m";

    public Task4(String username, String password) {
        this.username = username;
        this.password = password;
        System.out.println(GREEN + "Successfully registered!" + RESET);
        this.isLoggedIn = false;
        this.timeRemaining = 10;
        this.questionCount = 10;
        this.userAnswers = new int[questionCount];
        this.correctAnswers = new int[questionCount];
        this.questions = new String[questionCount];
        this.options = new String[questionCount][4];

        // Initialize questions and options
        initializeQuestions();
        
        // Initialize correct answers with predefined values
        for (int i = 0; i < questionCount; i++) {
            correctAnswers[i] = 1; // For simplicity, assume 1 is the correct answer for all
        }
    }

    private void initializeQuestions() {
        questions[0] = "What is React primarily used for?";
        options[0][0] = "1. Building server-side applications";
        options[0][1] = "2. Building user interfaces";
        options[0][2] = "3. Database management";
        options[0][3] = "4. Mobile app development";

        questions[1] = "Which hook is used for state management in React?";
        options[1][0] = "1. useEffect";
        options[1][1] = "2. useState";
        options[1][2] = "3. useReducer";
        options[1][3] = "4. useContext";

        questions[2] = "What is JSX?";
        options[2][0] = "1. A syntax extension for JavaScript";
        options[2][1] = "2. A CSS library";
        options[2][2] = "3. A database query language";
        options[2][3] = "4. A JavaScript compiler";

        questions[3] = "Which keyword is used to create a React component?";
        options[3][0] = "1. function";
        options[3][1] = "2. class";
        options[3][2] = "3. const";
        options[3][3] = "4. var";

        questions[4] = "How do you pass data to child components in React?";
        options[4][0] = "1. Using props";
        options[4][1] = "2. Using state";
        options[4][2] = "3. Using context";
        options[4][3] = "4. Using Redux";

        questions[5] = "What does the 'useEffect' hook do?";
        options[5][0] = "1. Handles side effects";
        options[5][1] = "2. Manages state";
        options[5][2] = "3. Fetches data";
        options[5][3] = "4. Updates DOM";

        questions[6] = "What is the virtual DOM in React?";
        options[6][0] = "1. A lightweight copy of the real DOM";
        options[6][1] = "2. A CSS model";
        options[6][2] = "3. A JavaScript library";
        options[6][3] = "4. A database model";

        questions[7] = "How do you handle events in React?";
        options[7][0] = "1. Using inline JavaScript";
        options[7][1] = "2. Using event handlers";
        options[7][2] = "3. Using Redux";
        options[7][3] = "4. Using Hooks";

        questions[8] = "What is React.Fragment used for?";
        options[8][0] = "1. To group multiple elements";
        options[8][1] = "2. To create animations";
        options[8][2] = "3. To optimize performance";
        options[8][3] = "4. To manage state";

        questions[9] = "Which React feature allows navigation without page reload?";
        options[9][0] = "1. React Router";
        options[9][1] = "2. Redux";
        options[9][2] = "3. Context API";
        options[9][3] = "4. useNavigate";
    }

    public void login() {
        Scanner sc = new Scanner(System.in);
        while (!isLoggedIn) {
            System.out.println(YELLOW + "Log in to give the Exam" + RESET);
            System.out.print(BLUE + "Username: " + RESET);
            String inputUsername = sc.nextLine();
            System.out.print(BLUE + "Password: " + RESET);
            String inputPassword = sc.nextLine();
            if (inputUsername.equals(username) && inputPassword.equals(password)) {
                isLoggedIn = true;
                System.out.println(GREEN + "Login successful! Best of luck!" + RESET);
            } else {
                System.out.println(RED + "Login failed. Please try again." + RESET);
            }
        }
    }

    public void logout() {
        isLoggedIn = false;
        System.out.println(GREEN + "Logout successful." + RESET);
    }

    public void startExam() {
        if (!isLoggedIn) {
            System.out.println(RED + "Please login first." + RESET);
            return;
        }
        Scanner sc = new Scanner(System.in);
        System.out.println("You have " + timeRemaining + " minutes to complete the exam.");
        for (int i = 0; i < questionCount; i++) {
            System.out.println("Question " + (i + 1) + ": " + questions[i]);
            for (int j = 0; j < 4; j++) {
                System.out.println(options[i][j]);
            }
            System.out.print(BLUE + "Your answer (1-4): " + RESET);
            int answer = sc.nextInt();
            userAnswers[i] = answer;
        }
        submitExam();
    }

    public void submitExam() {
        if (!isLoggedIn) {
            System.out.println(RED + "Please login first." + RESET);
            return;
        }
        int score = 0;
        for (int i = 0; i < questionCount; i++) {
            System.out.println("Question " + (i + 1) + ": " + questions[i]);
            for (int j = 0; j < 4; j++) {
                if (j + 1 == userAnswers[i]) {
                    if (userAnswers[i] == correctAnswers[i]) {
                        System.out.println(GREEN + options[i][j] + " (Your Answer - Correct)" + RESET);
                        score++;
                    } else {
                        System.out.println(RED + options[i][j] + " (Your Answer - Wrong)" + RESET);
                    }
                } else if (j + 1 == correctAnswers[i]) {
                    System.out.println(GREEN + options[i][j] + " (Correct Answer)" + RESET);
                } else {
                    System.out.println(options[i][j]);
                }
            }
        }
        System.out.println("Your score is " + score + " out of " + questionCount + ".");
        System.out.println("Best of luck!");
        logout();
    }


    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        System.out.println(YELLOW + "Enter your username and password:" + RESET);
        String uName = sc.nextLine();
        String pWord = sc.nextLine();
        Task4 examSystem = new Task4(uName, pWord);
        examSystem.login();
        examSystem.startExam();
    }
}
